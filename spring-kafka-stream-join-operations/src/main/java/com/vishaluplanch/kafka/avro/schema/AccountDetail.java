/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vishaluplanch.kafka.avro.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AccountDetail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -378295576057336895L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountDetail\",\"namespace\":\"com.vishaluplanch.kafka.avro.schema\",\"fields\":[{\"name\":\"customerUniqueIdentification\",\"type\":\"long\",\"default\":-1},{\"name\":\"accountNumber\",\"type\":\"int\",\"default\":-1},{\"name\":\"currentBalance\",\"type\":\"double\",\"default\":0.0},{\"name\":\"accountHolderName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"address\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"branchCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"micrCode\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AccountDetail> ENCODER =
      new BinaryMessageEncoder<AccountDetail>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccountDetail> DECODER =
      new BinaryMessageDecoder<AccountDetail>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AccountDetail> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AccountDetail> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AccountDetail>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AccountDetail to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AccountDetail from a ByteBuffer. */
  public static AccountDetail fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long customerUniqueIdentification;
  @Deprecated public int accountNumber;
  @Deprecated public double currentBalance;
  @Deprecated public java.lang.CharSequence accountHolderName;
  @Deprecated public java.lang.CharSequence address;
  @Deprecated public java.lang.CharSequence branchCode;
  @Deprecated public java.lang.CharSequence micrCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountDetail() {}

  /**
   * All-args constructor.
   * @param customerUniqueIdentification The new value for customerUniqueIdentification
   * @param accountNumber The new value for accountNumber
   * @param currentBalance The new value for currentBalance
   * @param accountHolderName The new value for accountHolderName
   * @param address The new value for address
   * @param branchCode The new value for branchCode
   * @param micrCode The new value for micrCode
   */
  public AccountDetail(java.lang.Long customerUniqueIdentification, java.lang.Integer accountNumber, java.lang.Double currentBalance, java.lang.CharSequence accountHolderName, java.lang.CharSequence address, java.lang.CharSequence branchCode, java.lang.CharSequence micrCode) {
    this.customerUniqueIdentification = customerUniqueIdentification;
    this.accountNumber = accountNumber;
    this.currentBalance = currentBalance;
    this.accountHolderName = accountHolderName;
    this.address = address;
    this.branchCode = branchCode;
    this.micrCode = micrCode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return customerUniqueIdentification;
    case 1: return accountNumber;
    case 2: return currentBalance;
    case 3: return accountHolderName;
    case 4: return address;
    case 5: return branchCode;
    case 6: return micrCode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: customerUniqueIdentification = (java.lang.Long)value$; break;
    case 1: accountNumber = (java.lang.Integer)value$; break;
    case 2: currentBalance = (java.lang.Double)value$; break;
    case 3: accountHolderName = (java.lang.CharSequence)value$; break;
    case 4: address = (java.lang.CharSequence)value$; break;
    case 5: branchCode = (java.lang.CharSequence)value$; break;
    case 6: micrCode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'customerUniqueIdentification' field.
   * @return The value of the 'customerUniqueIdentification' field.
   */
  public java.lang.Long getCustomerUniqueIdentification() {
    return customerUniqueIdentification;
  }

  /**
   * Sets the value of the 'customerUniqueIdentification' field.
   * @param value the value to set.
   */
  public void setCustomerUniqueIdentification(java.lang.Long value) {
    this.customerUniqueIdentification = value;
  }

  /**
   * Gets the value of the 'accountNumber' field.
   * @return The value of the 'accountNumber' field.
   */
  public java.lang.Integer getAccountNumber() {
    return accountNumber;
  }

  /**
   * Sets the value of the 'accountNumber' field.
   * @param value the value to set.
   */
  public void setAccountNumber(java.lang.Integer value) {
    this.accountNumber = value;
  }

  /**
   * Gets the value of the 'currentBalance' field.
   * @return The value of the 'currentBalance' field.
   */
  public java.lang.Double getCurrentBalance() {
    return currentBalance;
  }

  /**
   * Sets the value of the 'currentBalance' field.
   * @param value the value to set.
   */
  public void setCurrentBalance(java.lang.Double value) {
    this.currentBalance = value;
  }

  /**
   * Gets the value of the 'accountHolderName' field.
   * @return The value of the 'accountHolderName' field.
   */
  public java.lang.CharSequence getAccountHolderName() {
    return accountHolderName;
  }

  /**
   * Sets the value of the 'accountHolderName' field.
   * @param value the value to set.
   */
  public void setAccountHolderName(java.lang.CharSequence value) {
    this.accountHolderName = value;
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.CharSequence getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.lang.CharSequence value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'branchCode' field.
   * @return The value of the 'branchCode' field.
   */
  public java.lang.CharSequence getBranchCode() {
    return branchCode;
  }

  /**
   * Sets the value of the 'branchCode' field.
   * @param value the value to set.
   */
  public void setBranchCode(java.lang.CharSequence value) {
    this.branchCode = value;
  }

  /**
   * Gets the value of the 'micrCode' field.
   * @return The value of the 'micrCode' field.
   */
  public java.lang.CharSequence getMicrCode() {
    return micrCode;
  }

  /**
   * Sets the value of the 'micrCode' field.
   * @param value the value to set.
   */
  public void setMicrCode(java.lang.CharSequence value) {
    this.micrCode = value;
  }

  /**
   * Creates a new AccountDetail RecordBuilder.
   * @return A new AccountDetail RecordBuilder
   */
  public static com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder newBuilder() {
    return new com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder();
  }

  /**
   * Creates a new AccountDetail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountDetail RecordBuilder
   */
  public static com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder newBuilder(com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder other) {
    return new com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder(other);
  }

  /**
   * Creates a new AccountDetail RecordBuilder by copying an existing AccountDetail instance.
   * @param other The existing instance to copy.
   * @return A new AccountDetail RecordBuilder
   */
  public static com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder newBuilder(com.vishaluplanch.kafka.avro.schema.AccountDetail other) {
    return new com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder(other);
  }

  /**
   * RecordBuilder for AccountDetail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountDetail>
    implements org.apache.avro.data.RecordBuilder<AccountDetail> {

    private long customerUniqueIdentification;
    private int accountNumber;
    private double currentBalance;
    private java.lang.CharSequence accountHolderName;
    private java.lang.CharSequence address;
    private java.lang.CharSequence branchCode;
    private java.lang.CharSequence micrCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.customerUniqueIdentification)) {
        this.customerUniqueIdentification = data().deepCopy(fields()[0].schema(), other.customerUniqueIdentification);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[1].schema(), other.accountNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentBalance)) {
        this.currentBalance = data().deepCopy(fields()[2].schema(), other.currentBalance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountHolderName)) {
        this.accountHolderName = data().deepCopy(fields()[3].schema(), other.accountHolderName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.branchCode)) {
        this.branchCode = data().deepCopy(fields()[5].schema(), other.branchCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.micrCode)) {
        this.micrCode = data().deepCopy(fields()[6].schema(), other.micrCode);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AccountDetail instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vishaluplanch.kafka.avro.schema.AccountDetail other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.customerUniqueIdentification)) {
        this.customerUniqueIdentification = data().deepCopy(fields()[0].schema(), other.customerUniqueIdentification);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountNumber)) {
        this.accountNumber = data().deepCopy(fields()[1].schema(), other.accountNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentBalance)) {
        this.currentBalance = data().deepCopy(fields()[2].schema(), other.currentBalance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.accountHolderName)) {
        this.accountHolderName = data().deepCopy(fields()[3].schema(), other.accountHolderName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.branchCode)) {
        this.branchCode = data().deepCopy(fields()[5].schema(), other.branchCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.micrCode)) {
        this.micrCode = data().deepCopy(fields()[6].schema(), other.micrCode);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'customerUniqueIdentification' field.
      * @return The value.
      */
    public java.lang.Long getCustomerUniqueIdentification() {
      return customerUniqueIdentification;
    }

    /**
      * Sets the value of the 'customerUniqueIdentification' field.
      * @param value The value of 'customerUniqueIdentification'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setCustomerUniqueIdentification(long value) {
      validate(fields()[0], value);
      this.customerUniqueIdentification = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'customerUniqueIdentification' field has been set.
      * @return True if the 'customerUniqueIdentification' field has been set, false otherwise.
      */
    public boolean hasCustomerUniqueIdentification() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'customerUniqueIdentification' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearCustomerUniqueIdentification() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountNumber' field.
      * @return The value.
      */
    public java.lang.Integer getAccountNumber() {
      return accountNumber;
    }

    /**
      * Sets the value of the 'accountNumber' field.
      * @param value The value of 'accountNumber'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setAccountNumber(int value) {
      validate(fields()[1], value);
      this.accountNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountNumber' field has been set.
      * @return True if the 'accountNumber' field has been set, false otherwise.
      */
    public boolean hasAccountNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountNumber' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearAccountNumber() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentBalance' field.
      * @return The value.
      */
    public java.lang.Double getCurrentBalance() {
      return currentBalance;
    }

    /**
      * Sets the value of the 'currentBalance' field.
      * @param value The value of 'currentBalance'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setCurrentBalance(double value) {
      validate(fields()[2], value);
      this.currentBalance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentBalance' field has been set.
      * @return True if the 'currentBalance' field has been set, false otherwise.
      */
    public boolean hasCurrentBalance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currentBalance' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearCurrentBalance() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountHolderName' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccountHolderName() {
      return accountHolderName;
    }

    /**
      * Sets the value of the 'accountHolderName' field.
      * @param value The value of 'accountHolderName'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setAccountHolderName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.accountHolderName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'accountHolderName' field has been set.
      * @return True if the 'accountHolderName' field has been set, false otherwise.
      */
    public boolean hasAccountHolderName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'accountHolderName' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearAccountHolderName() {
      accountHolderName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setAddress(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearAddress() {
      address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'branchCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getBranchCode() {
      return branchCode;
    }

    /**
      * Sets the value of the 'branchCode' field.
      * @param value The value of 'branchCode'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setBranchCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.branchCode = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'branchCode' field has been set.
      * @return True if the 'branchCode' field has been set, false otherwise.
      */
    public boolean hasBranchCode() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'branchCode' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearBranchCode() {
      branchCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'micrCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getMicrCode() {
      return micrCode;
    }

    /**
      * Sets the value of the 'micrCode' field.
      * @param value The value of 'micrCode'.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder setMicrCode(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.micrCode = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'micrCode' field has been set.
      * @return True if the 'micrCode' field has been set, false otherwise.
      */
    public boolean hasMicrCode() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'micrCode' field.
      * @return This builder.
      */
    public com.vishaluplanch.kafka.avro.schema.AccountDetail.Builder clearMicrCode() {
      micrCode = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccountDetail build() {
      try {
        AccountDetail record = new AccountDetail();
        record.customerUniqueIdentification = fieldSetFlags()[0] ? this.customerUniqueIdentification : (java.lang.Long) defaultValue(fields()[0]);
        record.accountNumber = fieldSetFlags()[1] ? this.accountNumber : (java.lang.Integer) defaultValue(fields()[1]);
        record.currentBalance = fieldSetFlags()[2] ? this.currentBalance : (java.lang.Double) defaultValue(fields()[2]);
        record.accountHolderName = fieldSetFlags()[3] ? this.accountHolderName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.address = fieldSetFlags()[4] ? this.address : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.branchCode = fieldSetFlags()[5] ? this.branchCode : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.micrCode = fieldSetFlags()[6] ? this.micrCode : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccountDetail>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccountDetail>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccountDetail>
    READER$ = (org.apache.avro.io.DatumReader<AccountDetail>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
